service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: dev
  profile: default
  environment:
    PRODUCTS_TABLE: 'aws_courses_products'
    PRODUCTS_STOCK_TABLE: 'AWS_courses_stocks'
    SQS_URL:
      Ref: CatalogItemsQueue
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - sns:Publish
            - sns:Subscribe
          Resource: !Ref createProductTopic
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_STOCK_TABLE}"
        - Effect: "Allow"
          Action:
            - sqs:SendMessage
          Resource:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn

resources:
  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: aws-courses-task-queue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: petukhdzmitry@gmail.com
        TopicArn: !Ref createProductTopic
  Outputs:
    CatalogItemsQueueArn:
      Description: "Arn CatalogItemsQueue for import in import service"
      Value:
        Fn::GetAtt:
          - CatalogItemsQueue
          - Arn
      Export:
        Name: CatalogItemsQueueArn

functions:
  createProductOptions:
    handler: handler.createProductOptions
    events:
      - httpApi:
          path: /products
          method: options
  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          path: /products
          method: post
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  getProductById:
    handler: handler.getProductById
    events:
      - httpApi:
          path: /product/{id}
          method: get
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    environment:
      SNS_TOPIC_ARN: !Ref createProductTopic
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5
